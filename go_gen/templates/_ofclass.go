:: # Copyright 2013, Big Switch Networks, Inc.
:: # Copyright 2018, Red Hat, Inc.
:: #
:: # LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
:: # the following special exception:
:: #
:: # LOXI Exception
:: #
:: # As a special exception to the terms of the EPL, you may distribute libraries
:: # generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
:: # that copyright and licensing notices generated by LoxiGen are not altered or removed
:: # from the LoxiGen Libraries and the notice provided below is (i) included in
:: # the LoxiGen Libraries, if distributed in source code form and (ii) included in any
:: # documentation for the LoxiGen Libraries, if distributed in binary form.
:: #
:: # Notice: "Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
:: #
:: # You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
:: # a copy of the EPL at:
:: #
:: # http://www.eclipse.org/legal/epl-v10.html
:: #
:: # Unless required by applicable law or agreed to in writing, software
:: # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
:: # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
:: # EPL for the specific language governing permissions and limitations
:: # under the EPL.
::
:: from loxi_ir import *
:: import go_gen.oftype
:: import go_gen.util as util
:: import loxi_utils.loxi_utils as loxi_utils
:: real_members = go_gen.oftype.oftype_unherited_members(ofclass)
:: type_members = [m for m in ofclass.members if type(m) == OFTypeMember]
:: has_content = go_gen.oftype.oftype_has_content(ofclass, real_members)
::
type ${ofclass.goname} struct {
:: for m in real_members:
::     if type(m) != OFPadMember:
::         if ofclass.superclass and ofclass.superclass.member_by_name(m.name):
::             continue
::         #endif
::         oftype = go_gen.oftype.lookup_type_data(m.oftype, version)
::             if not oftype and loxi_utils.oftype_is_list(m.oftype):
::                 oftype = "[]" + util.go_ident(loxi_utils.oftype_list_elem(m.oftype))
::             elif oftype != None:
::                 oftype = oftype.name
::             else:
::                 raise Exception("Could not determine type for %s" % (m.name,))
::             #endif
	${m.goname} ${oftype}
::     #endif
:: #endfor
::
:: if has_content:
	Content Serializable
:: #endif
}
::
:: if ofclass.superclass and ofclass.superclass.name == "of_header":
::     for type_member in type_members:
::         if type_member.name == "type":

func (self *${ofclass.goname}) MessageType() MessageType {
	return ${type_member.value}
}
::         #endif
::     #endfor
:: #endif
::
::
:: base_length = ofclass.base_length
:: base_offset = real_members[0].offset if len(real_members) > 0 else 0
:: if ofclass.superclass:
::     base_length -= base_offset
:: #endif
:: if real_members:
::     include('_serialize.go', ofclass=ofclass, members=real_members, base_length=base_length, base_offset=base_offset)

::     include('_decode.go', ofclass=ofclass, members=real_members, base_length=base_length, base_offset=base_offset)
:: #endif