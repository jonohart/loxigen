:: # Copyright 2013, Big Switch Networks, Inc.
:: # Copyright 2018, Red Hat, Inc.
:: #
:: # LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
:: # the following special exception:
:: #
:: # LOXI Exception
:: #
:: # As a special exception to the terms of the EPL, you may distribute libraries
:: # generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
:: # that copyright and licensing notices generated by LoxiGen are not altered or removed
:: # from the LoxiGen Libraries and the notice provided below is (i) included in
:: # the LoxiGen Libraries, if distributed in source code form and (ii) included in any
:: # documentation for the LoxiGen Libraries, if distributed in binary form.
:: #
:: # Notice: "Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
:: #
:: # You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
:: # a copy of the EPL at:
:: #
:: # http://www.eclipse.org/legal/epl-v10.html
:: #
:: # Unless required by applicable law or agreed to in writing, software
:: # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
:: # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
:: # EPL for the specific language governing permissions and limitations
:: # under the EPL.
::
:: from string import Template
:: from loxi_ir import *
:: import go_gen.oftype
:: import go_gen.util as util
:: import loxi_globals
:: import loxi_utils.loxi_utils as loxi_utils
::
func (self *${ofclass.goname}) DecodeFromBytes(data []byte, df gopacket.DecodeFeedback) error {
:: if base_length:
	if len(data) < ${base_length} {
		df.SetTruncated()
		return errors.New("OpenFlow packet too short")
	}

:: #endif

:: for member in members:
::
::     offset = member.offset - base_offset if member.offset else 0
::     length = go_gen.oftype.oftype_get_length(ofclass, member, version)
::
::     if type(member) != OFPadMember:
::         member_name = "self." + member.goname
::         oftype = go_gen.oftype.lookup_type_data(member.oftype, version)
::
::         if oftype:
	${oftype.unserialize.substitute(member=member_name, offset=offset, length=length)}
::         elif loxi_utils.oftype_is_list(member.oftype):
::             include('_decode_list.go', version=version, member=member,
::                                        offset=offset, length=length)     
::         else:
::             raise Exception("Unhandled member: %s" % (str(member)))
::         #endif
::     #endif
::
:: #endfor

:: discriminator = ofclass.discriminator
:: if discriminator and hasattr(discriminator, "values"):
::     include('_decode_content.go', discriminator=discriminator, offset=base_length)
:: #endif

	return nil
}
